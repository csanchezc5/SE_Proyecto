CREATE TABLE roles (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE usuarios (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    correo VARCHAR(100) UNIQUE NOT NULL,
    contraseña TEXT NOT NULL,
    rol_id INT REFERENCES roles(id)
);

CREATE TABLE clientes (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    documento_identidad VARCHAR(20) NOT NULL UNIQUE,
    correo VARCHAR(100),
    telefono VARCHAR(20)
);

CREATE TABLE habitaciones (
    id SERIAL PRIMARY KEY,
    numero VARCHAR(10) UNIQUE NOT NULL,
    tipo VARCHAR(50) NOT NULL,  -- ej: simple, doble, suite
    precio_noche NUMERIC(10,2) NOT NULL,
    estado VARCHAR(20) DEFAULT 'disponible'  -- disponible, ocupada, mantenimiento
);

CREATE TABLE reservas (
    id SERIAL PRIMARY KEY,
    cliente_id INT REFERENCES clientes(id),
    habitacion_id INT REFERENCES habitaciones(id),
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    estado VARCHAR(20) DEFAULT 'reservada',  -- reservada, cancelada, completada
    fecha_reserva TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE facturas (
    id SERIAL PRIMARY KEY,
    reserva_id INT REFERENCES reservas(id),
    fecha_emision DATE NOT NULL,
    total NUMERIC(10,2) NOT NULL,
    estado VARCHAR(20) DEFAULT 'pendiente' -- pagada, pendiente, anulada
);

CREATE TABLE pagos (
    id SERIAL PRIMARY KEY,
    factura_id INT REFERENCES facturas(id),
    fecha_pago DATE NOT NULL,
    monto NUMERIC(10,2) NOT NULL,
    metodo_pago VARCHAR(50) NOT NULL -- efectivo, tarjeta, etc.
);

CREATE TABLE ingresos (
    id SERIAL PRIMARY KEY,
    reserva_id INT REFERENCES reservas(id),
    monto NUMERIC(10,2) NOT NULL,
    descripcion TEXT,
    fecha DATE DEFAULT CURRENT_DATE
);

CREATE TABLE egresos (
    id SERIAL PRIMARY KEY,
    descripcion TEXT NOT NULL,
    monto NUMERIC(10,2) NOT NULL,
    fecha DATE DEFAULT CURRENT_DATE
);

CREATE TABLE cuentas (
    id SERIAL PRIMARY KEY,
    codigo VARCHAR(100) NOT NULL UNIQUE,
    nombre VARCHAR(100) NOT NULL,
    tipo VARCHAR(20) NOT NULL,  -- Ej: activo, pasivo, ingreso, gasto
    nivel INT NOT NULL
);

INSERT INTO cuentas (codigo, nombre, tipo, nivel) VALUES
('09999', 'ACTIVOS', 'activo', 1),
('08888', 'ACTIVO CORRIENTE', 'activo', 2);


--Vistas para los Reportes

-- Vista del Libro Diario 
CREATE OR REPLACE VIEW vistadellibro_diario AS
WITH libro_base AS (
    SELECT 
        fecha,
        'Ingreso' AS tipo,
        COALESCE(descripcion, 'Ingreso por reserva') AS descripcion,
        monto
    FROM ingresos
    UNION ALL
    SELECT 
        fecha,
        'Egreso' AS tipo,
        COALESCE(descripcion, 'Egreso') AS descripcion,
        monto
    FROM egresos
)
SELECT 
    ROW_NUMBER() OVER (ORDER BY fecha DESC, descripcion) AS id,
    fecha,
    tipo,
    descripcion,
    monto
FROM libro_base
ORDER BY fecha DESC, tipo;

-- Vista del Registro de Huéspedes
CREATE OR REPLACE VIEW vistadelregistro_huespedes AS
SELECT 
    ROW_NUMBER() OVER (ORDER BY r.fecha_inicio DESC, c.nombre) AS id,
    COALESCE(c.nombre, 'Sin nombre') AS cliente,
    COALESCE(c.documento_identidad, 'Sin documento') AS documento_identidad,
    c.correo,
    c.telefono,
    r.fecha_inicio,
    r.fecha_fin,
    COALESCE(h.numero, 'Sin asignar') AS habitacion,
    COALESCE(h.tipo, 'Sin tipo') AS tipo_habitacion,
    COALESCE(r.estado, 'Sin estado') AS estado_reserva
FROM reservas r
LEFT JOIN clientes c ON r.cliente_id = c.id
LEFT JOIN habitaciones h ON r.habitacion_id = h.id
ORDER BY r.fecha_inicio DESC;

-- Vista del Registro de Ocupación
CREATE OR REPLACE VIEW vistadelregistro_ocupacion AS
SELECT 
    ROW_NUMBER() OVER (ORDER BY h.numero, r.fecha_inicio DESC) AS id,
    COALESCE(h.numero, 'Sin número') AS habitacion,
    COALESCE(h.tipo, 'Sin tipo') AS tipo,
    r.fecha_inicio,
    r.fecha_fin,
    COALESCE(r.estado, 'Sin estado') AS estado_reserva,
    COALESCE(c.nombre, 'Sin cliente') AS cliente
FROM reservas r
LEFT JOIN habitaciones h ON r.habitacion_id = h.id
LEFT JOIN clientes c ON r.cliente_id = c.id
WHERE r.estado IN ('reservada', 'completada', 'cancelada')
ORDER BY h.numero, r.fecha_inicio DESC;

-- Crear índices para mejorar el rendimiento
CREATE INDEX IF NOT EXISTS idx_ingresos_fecha ON ingresos(fecha DESC);
CREATE INDEX IF NOT EXISTS idx_egresos_fecha ON egresos(fecha DESC);
CREATE INDEX IF NOT EXISTS idx_reservas_fechas ON reservas(fecha_inicio DESC, fecha_fin);
CREATE INDEX IF NOT EXISTS idx_reservas_estado ON reservas(estado);
CREATE INDEX IF NOT EXISTS idx_clientes_documento ON clientes(documento_identidad);
CREATE INDEX IF NOT EXISTS idx_clientes_nombre ON clientes(nombre);
CREATE INDEX IF NOT EXISTS idx_habitaciones_numero ON habitaciones(numero);
CREATE INDEX IF NOT EXISTS idx_habitaciones_tipo ON habitaciones(tipo);